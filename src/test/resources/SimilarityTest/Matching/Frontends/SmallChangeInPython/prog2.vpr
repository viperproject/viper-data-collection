domain PyType  {

  function extends_(sub: PyType, super: PyType): Bool

  function issubtype(sub: PyType, super: PyType): Bool

  function isnotsubtype(sub: PyType, super: PyType): Bool

  function tuple_args(t: PyType): Seq[PyType]

  function typeof(obj: Ref): PyType

  function get_basic(t: PyType): PyType

  function union_type_1(arg_1: PyType): PyType

  function union_type_2(arg_1: PyType, arg_2: PyType): PyType

  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType

  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType

  unique function object(): PyType

  unique function list_basic(): PyType

  function list(arg0: PyType): PyType

  function list_arg(typ: PyType, index: Int): PyType

  unique function set_basic(): PyType

  function set(arg0: PyType): PyType

  function set_arg(typ: PyType, index: Int): PyType

  unique function dict_basic(): PyType

  function dict(arg0: PyType, arg1: PyType): PyType

  function dict_arg(typ: PyType, index: Int): PyType

  unique function int(): PyType

  unique function float(): PyType

  unique function bool(): PyType

  unique function NoneType(): PyType

  unique function Exception(): PyType

  unique function ConnectionRefusedError(): PyType

  unique function traceback(): PyType

  unique function str(): PyType

  unique function bytes(): PyType

  unique function tuple_basic(): PyType

  function tuple(args: Seq[PyType]): PyType

  function tuple_arg(typ: PyType, index: Int): PyType

  unique function PSeq_basic(): PyType

  function PSeq(arg0: PyType): PyType

  function PSeq_arg(typ: PyType, index: Int): PyType

  unique function PSet_basic(): PyType

  function PSet(arg0: PyType): PyType

  function PSet_arg(typ: PyType, index: Int): PyType

  unique function PMultiset_basic(): PyType

  function PMultiset(arg0: PyType): PyType

  function PMultiset_arg(typ: PyType, index: Int): PyType

  unique function slice(): PyType

  unique function range_0(): PyType

  unique function Iterator_basic(): PyType

  function Iterator(arg0: PyType): PyType

  function Iterator_arg(typ: PyType, index: Int): PyType

  unique function Thread_0(): PyType

  unique function LevelType(): PyType

  unique function type(): PyType

  unique function Place(): PyType

  unique function __prim__Seq_type(): PyType

  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), issubtype(middle, super) }
      issubtype(sub, middle) && issubtype(middle, super) ==>
      issubtype(sub, super))
  }

  axiom issubtype_reflexivity {
    (forall type_: PyType ::
      { issubtype(type_, type_) }
      issubtype(type_, type_))
  }

  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType ::
      { extends_(sub, sub2) }
      extends_(sub, sub2) ==> issubtype(sub, sub2))
  }

  axiom null_nonetype {
    (forall r: Ref ::
      { typeof(r) }
      issubtype(typeof(r), NoneType()) == (r == null))
  }

  axiom issubtype_object {
    (forall type_: PyType ::
      { issubtype(type_, object()) }
      issubtype(type_, object()))
  }

  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType ::
      { extends_(sub, super), extends_(sub2, super) }
      extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==>
      isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }

  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType ::
      { issubtype(sub, super) }
      { issubtype(super, sub) }
      issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }

  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType ::
      { issubtype(sub, middle), isnotsubtype(middle, super) }
      issubtype(sub, middle) && isnotsubtype(middle, super) ==>
      !issubtype(sub, super))
  }

  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType ::
      { tuple(seq), tuple_arg(Z, i) }
      issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }

  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType ::
      { issubtype(Z, tuple(seq)) }
      issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }

  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] ::seq1 != seq2 &&
      |seq1| == |seq2| &&
      (forall i: Int ::i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==>
      issubtype(tuple(seq1), tuple(seq2)))
  }

  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(X, union_type_1(arg_1)) }
      issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }

  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(X, union_type_2(arg_1, arg_2)) }
      issubtype(X, union_type_2(arg_1, arg_2)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }

  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) }
      issubtype(X, union_type_3(arg_1, arg_2, arg_3)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3)))
  }

  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) }
      issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) ==
      (false || issubtype(X, arg_1) || issubtype(X, arg_2) ||
      issubtype(X, arg_3) ||
      issubtype(X, arg_4)))
  }

  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType ::
      { issubtype(union_type_1(arg_1), X) }
      issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }

  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType ::
      { issubtype(union_type_2(arg_1, arg_2), X) }
      issubtype(union_type_2(arg_1, arg_2), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }

  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType ::
      { issubtype(union_type_3(arg_1, arg_2, arg_3), X) }
      issubtype(union_type_3(arg_1, arg_2, arg_3), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X)))
  }

  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType ::
      { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) }
      issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) ==
      (true && issubtype(arg_1, X) && issubtype(arg_2, X) &&
      issubtype(arg_3, X) &&
      issubtype(arg_4, X)))
  }

  axiom subtype_list {
    (forall var0: PyType ::
      { list(var0) }
      extends_(list(var0), object()) &&
      get_basic(list(var0)) == list_basic())
  }

  axiom list_args0 {
    (forall Z: PyType, arg0: PyType ::
      { list(arg0), list_arg(Z, 0) }
      issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }

  axiom subtype_set {
    (forall var0: PyType ::
      { set(var0) }
      extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }

  axiom set_args0 {
    (forall Z: PyType, arg0: PyType ::
      { set(arg0), set_arg(Z, 0) }
      issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }

  axiom subtype_dict {
    (forall var0: PyType, var1: PyType ::
      { dict(var0, var1) }
      extends_(dict(var0, var1), object()) &&
      get_basic(dict(var0, var1)) == dict_basic())
  }

  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 0) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }

  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType ::
      { dict(arg0, arg1), dict_arg(Z, 1) }
      issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }

  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }

  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }

  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }

  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }

  axiom subtype_Exception {
    extends_(Exception(), object()) &&
    get_basic(Exception()) == Exception()
  }

  axiom subtype_ConnectionRefusedError {
    extends_(ConnectionRefusedError(), Exception()) &&
    get_basic(ConnectionRefusedError()) == ConnectionRefusedError()
  }

  axiom subtype_traceback {
    extends_(traceback(), object()) &&
    get_basic(traceback()) == traceback()
  }

  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }

  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }

  axiom subtype_tuple {
    (forall args: Seq[PyType] ::
      { tuple(args) }
      ((forall e: PyType ::(e in args) ==> e == object()) ==>
      extends_(tuple(args), object())) &&
      get_basic(tuple(args)) == tuple_basic())
  }

  axiom subtype_PSeq {
    (forall var0: PyType ::
      { PSeq(var0) }
      extends_(PSeq(var0), object()) &&
      get_basic(PSeq(var0)) == PSeq_basic())
  }

  axiom PSeq_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSeq(arg0), PSeq_arg(Z, 0) }
      issubtype(Z, PSeq(arg0)) ==> PSeq_arg(Z, 0) == arg0)
  }

  axiom subtype_PSet {
    (forall var0: PyType ::
      { PSet(var0) }
      extends_(PSet(var0), object()) &&
      get_basic(PSet(var0)) == PSet_basic())
  }

  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PSet(arg0), PSet_arg(Z, 0) }
      issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }

  axiom subtype_PMultiset {
    (forall var0: PyType ::
      { PMultiset(var0) }
      extends_(PMultiset(var0), object()) &&
      get_basic(PMultiset(var0)) == PMultiset_basic())
  }

  axiom PMultiset_args0 {
    (forall Z: PyType, arg0: PyType ::
      { PMultiset(arg0), PMultiset_arg(Z, 0) }
      issubtype(Z, PMultiset(arg0)) ==> PMultiset_arg(Z, 0) == arg0)
  }

  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }

  axiom subtype_range_0 {
    extends_(range_0(), object()) && get_basic(range_0()) == range_0()
  }

  axiom subtype_Iterator {
    (forall var0: PyType ::
      { Iterator(var0) }
      extends_(Iterator(var0), object()) &&
      get_basic(Iterator(var0)) == Iterator_basic())
  }

  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType ::
      { Iterator(arg0), Iterator_arg(Z, 0) }
      issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }

  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }

  axiom subtype_LevelType {
    extends_(LevelType(), object()) &&
    get_basic(LevelType()) == LevelType()
  }

  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }

  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }

  axiom subtype___prim__Seq_type {
    extends_(__prim__Seq_type(), object()) &&
    get_basic(__prim__Seq_type()) == __prim__Seq_type()
  }
}

domain SIFDomain[T]  {

  function Low(x: T): Bool

  function LowEvent(): Bool

  axiom low_true {
    (forall x: T :: { (Low(x): Bool) } (Low(x): Bool))
  }

  axiom lowevent_true {
    (LowEvent(): Bool)
  }
}

domain _list_ce_helper  {

  function seq_ref_length(___s: Seq[Ref]): Int

  function seq_ref_index(___s: Seq[Ref], i: Int): Ref

  axiom relate_length {
    (forall ___s: Seq[Ref] :: { |___s| } |___s| == seq_ref_length(___s))
  }

  axiom relate_index {
    (forall ___s: Seq[Ref], ___i: Int ::
      { ___s[___i] }
      ___s[___i] == seq_ref_index(___s, ___i))
  }
}

domain Measure$  {

  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$

  function Measure$guard(m: Measure$): Bool

  function Measure$key(m: Measure$): Ref

  function Measure$value(m: Measure$): Int

  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$guard(Measure$create(g, k, v)) }
      Measure$guard(Measure$create(g, k, v)) == g)
  }

  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$key(Measure$create(g, k, v)) }
      Measure$key(Measure$create(g, k, v)) == k)
  }

  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int ::
      { Measure$value(Measure$create(g, k, v)) }
      Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain __MSHelper[T$]  {

  function __toMS(s: Seq[T$]): Multiset[T$]

  axiom __toMS_def_1 {
    (__toMS(Seq[T$]()): Multiset[T$]) == Multiset[T$]()
  }

  axiom __toMS_def_2 {
    (forall __t: T$ ::
      { (__toMS(Seq(__t)): Multiset[T$]) }
      (__toMS(Seq(__t)): Multiset[T$]) == Multiset(__t))
  }

  axiom __toMS_def_3 {
    (forall __ss1: Seq[T$], __ss2: Seq[T$] ::
      { (__toMS(__ss1 ++ __ss2): Multiset[T$]) }
      (__toMS(__ss1 ++ __ss2): Multiset[T$]) ==
      ((__toMS(__ss1): Multiset[T$]) union (__toMS(__ss2): Multiset[T$])))
  }

  axiom __toMS_def_4 {
    (forall __ss1: Seq[T$] ::
      { (__toMS(__ss1): Multiset[T$]) }
      |(__toMS(__ss1): Multiset[T$])| == |__ss1|)
  }
}

domain _Name  {

  function _combine(n1: _Name, n2: _Name): _Name

  function _single(n: Int): _Name

  function _get_combined_prefix(n: _Name): _Name

  function _get_combined_name(n: _Name): _Name

  function _get_value(n: _Name): Int

  function _name_type(n: _Name): Bool

  function _is_single(n: _Name): Bool

  function _is_combined(n: _Name): Bool

  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }

  axiom compose_single {
    (forall n: _Name ::
      { _get_value(n) }
      _is_single(n) ==> n == _single(_get_value(n)))
  }

  axiom type_of_single {
    (forall i: Int :: { _single(i) } _name_type(_single(i)))
  }

  axiom decompose_combined {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      _get_combined_prefix(_combine(n1, n2)) == n1 &&
      _get_combined_name(_combine(n1, n2)) == n2)
  }

  axiom compose_combined {
    (forall n: _Name ::
      { _get_combined_prefix(n) }
      { _get_combined_name(n) }
      _is_combined(n) ==>
      n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }

  axiom type_of_composed {
    (forall n1: _Name, n2: _Name ::
      { _combine(n1, n2) }
      !_name_type(_combine(n1, n2)))
  }

  axiom type_is_single {
    (forall n: _Name :: { _name_type(n) } _name_type(n) == _is_single(n))
  }

  axiom type_is_combined {
    (forall n: _Name ::
      { _name_type(n) }
      !_name_type(n) == _is_combined(n))
  }
}

domain IntWellFoundedOrder  {

  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }

  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
}

domain PredicateInstancesWellFoundedOrder  {

  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }

  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
}

domain WellFoundedOrder[T]  {

  function decreasing(arg1: T, arg2: T): Bool

  function bounded(arg1: T): Bool
}

domain PredicateInstancesNestedRelation  {

  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool

  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }

  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
}

domain PredicateInstance  {


}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Map[Ref,Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _isDefined(id: Int): Bool


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id)
{
  val
}

function __file__(): Ref


function __name__(): Ref


// decreases _
function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim


// decreases _
function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==>
    __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==>
    __prim__bool___box__(result != 0) == box


// decreases _
function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0)


// decreases _
function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box


// decreases _
function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int())
{
  int___unbox__(self) == int___unbox__(other)
}

// decreases _
function int___ge__(self: Int, other: Int): Bool
{
  self >= other
}

// decreases _
function int___gt__(self: Int, other: Int): Bool
{
  self > other
}

// decreases _
function int___le__(self: Int, other: Int): Bool
{
  self <= other
}

// decreases _
function int___lt__(self: Int, other: Int): Bool
{
  self < other
}

// decreases _
function int___mod__(self: Int, other: Int): Int
  requires other != 0
{
  self % other
}

// decreases _
function Level(r: Ref): Perm


// decreases _
function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool
{
  (forall m: Measure$ ::
    { (m in map) }
    (m in map) ==>
    Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

// decreases _
function range___create__(start: Int, stop: Int, ctr: Int): Ref
  requires stop >= start
  ensures range___val__(result) == [start..stop)
  ensures range___start__(result) == start
  ensures range___stop__(result) == stop
  ensures typeof(result) == range_0()


// decreases _
function range___val__(self: Ref): Seq[Int]


// decreases _
function range___start__(self: Ref): Int


// decreases _
function range___stop__(self: Ref): Int


// decreases _
function range___len__(self: Ref): Int
  requires issubtype(typeof(self), range_0())
  ensures result == |range___val__(self)|


// decreases _
function range___sil_seq__(self: Ref): Seq[Ref]
  requires issubtype(typeof(self), range_0())
  ensures |result| == range___len__(self)
  ensures (forall i: Int ::
      { result[i] }
      i >= 0 && i < |range___val__(self)| ==>
      result[i] == __prim__int___box__(range___val__(self)[i]))
  ensures (forall i: Ref ::
      { (i in result) }
      (i in result) ==
      (typeof(i) == int() && (int___unbox__(i) in range___val__(self))))


// decreases _
function PSeq___create__(prim: Seq[Ref], cont_type: PyType): Ref
  ensures typeof(result) == PSeq(cont_type)
  ensures PSeq___sil_seq__(result) == prim


// decreases _
function PSeq___sil_seq__(box: Ref): Seq[Ref]
  requires issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))


// decreases _
function PSeq___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
  requires issubtype(typeof(other), PSeq(PSeq_arg(typeof(other), 0)))
  requires PSeq_arg(typeof(self), 0) == PSeq_arg(typeof(other), 0)
  ensures result == (PSeq___sil_seq__(self) == PSeq___sil_seq__(other))
  ensures result ==> self == other


// decreases _
function str___len__(self: Ref): Int
  ensures result >= 0


// decreases _
function str___val__(self: Ref): Int


// decreases _
function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str()


// decreases _
function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other)


predicate MustTerminate(r: Ref)

predicate MustInvokeBounded(r: Ref)

predicate MustInvokeUnbounded(r: Ref)

predicate _MaySet(rec: Ref, id: Int)

method find_divisor_for(_cthread_155: Ref, _caller_measures_155: Seq[Measure$],
  _residue_155: Perm, product: Ref)
  returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(product), int())
  requires int___gt__(int___unbox__(product), 2)
  requires [true,
    perm(MustTerminate(_cthread_155)) == none &&
    ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) &&
    ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) &&
    (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <=
      _current_wait_level_155) &&
    ((forperm
      _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <=
      _current_wait_level_155) &&
    _residue_155 <= _current_wait_level_155),
    true]
  ensures issubtype(typeof(_res), int())
  ensures int___ge__(int___unbox__(_res), 2) &&
    int___le__(int___unbox__(_res), int___unbox__(product))
  ensures (forall lambda7_24$x: Ref ::
      { int___mod__(int___unbox__(product), int___unbox__(lambda7_24$x)) }
      issubtype(typeof(lambda7_24$x), int()) ==>
      issubtype(typeof(lambda7_24$x), int()) ==>
      int___ge__(int___unbox__(lambda7_24$x), 2) &&
      int___lt__(int___unbox__(lambda7_24$x), int___unbox__(_res)) ==>
      !int___eq__(__prim__int___box__(int___mod__(int___unbox__(product), int___unbox__(lambda7_24$x))),
      __prim__int___box__(0)))
  ensures !int___eq__(_res, product) ==>
    int___eq__(__prim__int___box__(int___mod__(int___unbox__(product), int___unbox__(_res))),
    __prim__int___box__(0))
  ensures [true,
    (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) &&
    ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) &&
    ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) &&
    (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]
{
  {
    var _err: Ref
    var i: Ref
    var product_0: Ref
    var iterable: Ref
    var iter: Ref
    var loop_target: Ref
    var iter_err: Ref
    var seqtmp: Seq[Ref]
    var _loop_measures: Seq[Measure$]
    var _loop_check_before: Bool
    var _loop_termination_flag: Bool
    var _loop_original_must_terminate: Perm
    var _residue_156: Perm
    var _cwl_155: Perm
    var _method_measures_155: Seq[Measure$]
    _method_measures_155 := Seq[Measure$]()
    _res := null
    _err := null
    product_0 := product
    iterable := range___create__(2, int___unbox__(product_0), 0)
    _cwl_155, iter := range___iter__(_cthread_155, _method_measures_155, _residue_155,
      iterable)
    _cwl_155, loop_target, iter_err := Iterator___next__(_cthread_155, _method_measures_155,
      _residue_155, iter)
    if (iter_err == null) {
      i := loop_target
      inhale _isDefined(105)
    }
    seqtmp := range___sil_seq__(iterable)
    // Save current MustTerminate amount.
    _loop_original_must_terminate := perm(MustTerminate(_cthread_155))
    // Save loop termination promise.
    _loop_termination_flag := false
    // We are before loop.
    _loop_check_before := true
    while (iter_err == null)
      invariant [(forperm
          _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_156) &&
        ((forperm
          _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_156) &&
        _residue_155 <= _residue_156),
        true]
      invariant acc(iter.list_acc, 1 / 20)
      invariant iter.list_acc == range___sil_seq__(iterable)
      invariant seqtmp == range___sil_seq__(iterable)
      invariant acc(iter.__iter_index, write)
      invariant acc(iter.__previous, write)
      invariant iter_err == null ==>
        iter.__iter_index - 1 == |iter.__previous|
      invariant iter_err != null ==> iter.__iter_index == |iter.__previous|
      invariant iter_err == null ==> |iter.list_acc| > 0
      invariant iter.__iter_index >= 0 &&
        iter.__iter_index <= |iter.list_acc|
      invariant |iter.list_acc| > 0 ==> iter.__iter_index > 0
      invariant |iter.list_acc| > 0 ==>
        loop_target == iter.list_acc[iter.__iter_index - 1]
      invariant |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
      invariant iter_err == null ==>
        iter.__previous == iter.list_acc[..iter.__iter_index - 1]
      invariant |iter.list_acc| > 0 ==>
        issubtype(typeof(loop_target), int())
      invariant |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
      invariant iter_err != null ==> iter.__previous == iter.list_acc
      invariant |iter.list_acc| == 0 ==> iter_err != null
      invariant true
      invariant int___ge__(int___unbox__(_checkDefined(i, 105)), 2) &&
        int___le__(int___unbox__(_checkDefined(i, 105)), int___unbox__(product_0))
      invariant (forall lambda11_38$x: Ref ::
          { (lambda11_38$x in
          PSeq___sil_seq__(PSeq___create__(iter.__previous, int()))) }
          { int___mod__(int___unbox__(product_0), int___unbox__(lambda11_38$x)) }
          issubtype(typeof(lambda11_38$x), int()) ==>
          (lambda11_38$x in
          PSeq___sil_seq__(PSeq___create__(iter.__previous, int()))) ==>
          !int___eq__(__prim__int___box__(int___mod__(int___unbox__(product_0),
          int___unbox__(lambda11_38$x))), __prim__int___box__(0)))
      invariant [true,
        _loop_check_before ==>
        _loop_termination_flag ||
        (!(iter_err == null) ||
        perm(MustTerminate(_cthread_155)) == none &&
        ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) &&
        ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) &&
        ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) &&
        (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]
      invariant [true,
        !_loop_check_before ==>
        (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) &&
        ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) &&
        ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) &&
        (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
    {
      _loop_measures := Seq[Measure$]()
      if (int___eq__(__prim__int___box__(int___mod__(int___unbox__(product_0),
      int___unbox__(_checkDefined(i, 105)))), __prim__int___box__(0))) {
        assert PSeq___eq__(PSeq___create__(iter.__previous, int()), PSeq___create__(range___sil_seq__(range___create__(2,
          int___unbox__(_checkDefined(i, 105)), 1)), int()))
        goto post_loop
      }
      label loop_end
      _cwl_155, loop_target, iter_err := Iterator___next__(_cthread_155, _method_measures_155,
        _residue_155, iter)
      if (iter_err == null) {
        i := loop_target
        inhale _isDefined(105)
      }
      // We are after loop body.
      _loop_check_before := false
      // Check if loop continues to terminate.
      assert _loop_termination_flag ==> !(iter_err == null)
    }
    // Reset MustTerminate amount to original level.
    exhale perm(MustTerminate(_cthread_155)) > none ==>
      acc(MustTerminate(_cthread_155), perm(MustTerminate(_cthread_155)) -
      _loop_original_must_terminate)
    _cwl_155 := Iterator___del__(_cthread_155, _method_measures_155, _residue_156,
      iter)
    _res := null
    i := product_0
    inhale _isDefined(105)
    label post_loop
    _res := null
    _res := _checkDefined(i, 105)
    goto __end
    goto __end
    label __end
  }
}

method main(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_157: Perm)
  returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true,
    perm(MustTerminate(_cthread_156)) == none &&
    ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) &&
    ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) &&
    (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]
  ensures [(forperm
      _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <=
      _current_wait_level_156) &&
    ((forperm
      _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <=
      _current_wait_level_156) &&
    _residue_157 <= _current_wait_level_156),
    true]
  ensures [true,
    (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) &&
    ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) &&
    (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]
{
  {
    var module_defined_0: Bool
    var module_names_0: Set[_Name]
    var _cwl_156: Perm
    var _method_measures_156: Seq[Measure$]
    _method_measures_156 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union
      Set(_single(6872323072689856351)))
    inhale acc(__file__()._val, 99 / 100) &&
      issubtype(typeof(__file__()._val), str()) &&
      issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union
      Set(_single(6872323076851130207)))
    inhale acc(__name__()._val, 99 / 100) &&
      issubtype(typeof(__name__()._val), str()) &&
      issubtype(typeof(__name__()._val), str()) &&
      str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
    module_names_0 := (module_names_0 union
      Set(_single(152110412838648813606492884722428832102)))
    goto __end
    label __end
  }
}

method Iterator___next__(_cthread_148: Ref, _caller_measures_148: Seq[Measure$],
  _residue_148: Perm, self: Ref)
  returns (_current_wait_level_148: Perm, _res: Ref, _err: Ref)
  requires _cthread_148 != null
  requires Measure$check(_caller_measures_148, _cthread_148, 1)
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires acc(self.list_acc, 1 / 40)
  requires acc(self.__iter_index, write)
  requires acc(self.__previous, write)
  requires [true, Measure$check(_caller_measures_148, _cthread_148, 1)]
  ensures [(forperm
      _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <=
      _current_wait_level_148) &&
    ((forperm
      _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <=
      _current_wait_level_148) &&
    _residue_148 <= _current_wait_level_148),
    true]
  ensures acc(self.list_acc, 1 / 40) && self.list_acc == old(self.list_acc)
  ensures acc(self.__iter_index, write)
  ensures self.__iter_index <= |self.list_acc| + 1
  ensures old(self.__iter_index == |self.list_acc|) == (_err != null)
  ensures acc(self.__previous, write)
  ensures _err == null ==> self.__iter_index == old(self.__iter_index) + 1
  ensures _err == null ==> self.__iter_index > 0
  ensures _err == null ==>
    self.__previous == self.list_acc[..self.__iter_index - 1]
  ensures |self.list_acc| > 0 ==> self.__iter_index > 0
  ensures _err != null ==> self.__previous == self.list_acc
  ensures _err != null ==> self.__iter_index == |self.list_acc|
  ensures |self.list_acc| > 0 ==>
    _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
  ensures |self.list_acc| > 0 ==>
    issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
  ensures (forall r: Ref ::
      { (r in self.__previous) }
      (r in self.__previous) ==
      ((r in old(self.__previous)) ||
      (self.__iter_index > 1 &&
      (r == self.list_acc[self.__iter_index - 2] && _err == null) ||
      self.__iter_index > 0 &&
      (_err != null && r == self.list_acc[self.__iter_index - 1]))))
{
  {
    var _cwl_148: Perm
    inhale false
  }
}

method Iterator___del__(_cthread_149: Ref, _caller_measures_149: Seq[Measure$],
  _residue_149: Perm, self: Ref)
  returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires Measure$check(_caller_measures_149, _cthread_149, 1)
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires acc(self.list_acc, 1 / 20)
  requires acc(self.__container, 1 / 20)
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 1)]
  ensures [(forperm
      _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <=
      _current_wait_level_149) &&
    ((forperm
      _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <=
      _current_wait_level_149) &&
    _residue_149 <= _current_wait_level_149),
    true]
  ensures acc(self.__container, 1 / 20)
  ensures issubtype(typeof(self.__container), list(list_arg(typeof(self.__container),
    0))) ==>
    acc(self.__container.list_acc, 1 / 20)
  ensures issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container),
    0), dict_arg(typeof(self.__container), 1))) ==>
    acc(self.__container.dict_acc, 1 / 20)
  ensures issubtype(typeof(self.__container), set(set_arg(typeof(self.__container),
    0))) ==>
    acc(self.__container.set_acc, 1 / 20)
{
  {
    var _cwl_149: Perm
    inhale false
  }
}

method range___iter__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$],
  _residue_147: Perm, self: Ref)
  returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires Measure$check(_caller_measures_147, _cthread_147, 1)
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self), range_0())
  requires [true, Measure$check(_caller_measures_147, _cthread_147, 1)]
  ensures [(forperm
      _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <=
      _current_wait_level_147) &&
    ((forperm
      _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <=
      _current_wait_level_147) &&
    _residue_147 <= _current_wait_level_147),
    true]
  ensures _res != self
  ensures acc(_res.list_acc, 1 / 20)
  ensures _res.list_acc == range___sil_seq__(self)
  ensures acc(_res.__container, write) && _res.__container == self
  ensures acc(_res.__iter_index, write) && _res.__iter_index == 0
  ensures acc(_res.__previous, write) && _res.__previous == Seq[Ref]()
{
  {
    var _cwl_147: Perm
    inhale false
  }
}