domain PredicateInstance  {


}

domain PredicateInstancesNestedRelation  {

  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool

  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }

  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
}

domain PredicateInstancesWellFoundedOrder  {

  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }

  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
}

domain String  {

  function strConcat(l: Int, r: Int): Int

  function strLen(id: Int): Int

  unique function stringLit(): Int

  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }

  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }

  axiom {
    strLen(stringLit()) == 0
  }
}

domain Tuple2[T0, T1]  {

  function get0of2(p: Tuple2[T0, T1]): T0

  function get1of2(p: Tuple2[T0, T1]): T1

  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1]

  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }

  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Types  {

  function behavioral_subtype_Types(l: Types, r: Types): Bool

  function comparableType_Types(t: Types): Bool

  function empty_interface_Types(): Types

  unique function empty_interface_Types_tag(): Int

  function nil_Types(): Types

  unique function nil_Types_tag(): Int

  function tag_Types(t: Types): Int

  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }

  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }

  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }

  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }

  axiom {
    comparableType_Types(nil_Types()) == true
  }

  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }

  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain WellFoundedOrder[T]  {

  function bounded(arg1: T): Bool

  function decreasing(arg1: T, arg2: T): Bool
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
function IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)


predicate ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])

method $IMPORTS_76e1b866_76e1b866()
{

  // decl
  {


    label returnLabel
  }
}

method $IMPORTS_76e1b866_a4af0e5e()
{

  // decl
  {


    label returnLabel
  }
}

// decreases
method $INIT_76e1b866_653527f2()
{

  // decl
  {


    label returnLabel
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Duplicate_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==>
    acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Error_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  {
    var b1: Bool
    if (b1) {
      inhale false
    } else {
      inhale !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))}
  }
  inhale acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false


method sum_76e1b866_F(n_V0: Int) returns (sum_V0: Int)
  requires 0 <= n_V0
  ensures sum_V0 == n_V0 * (n_V0 + 1) / 2
{
  inhale sum_V0 == 0

  // decl n_V0_CN0: int°°, sum_V0_CN1: int°°
  {
    var n_V0_CN0: Int
    var sum_V0_CN1: Int



    // init n_V0_CN0
    inhale n_V0_CN0 == 0

    // init sum_V0_CN1
    inhale sum_V0_CN1 == 0

    // n_V0_CN0 = n_V0
    n_V0_CN0 := n_V0

    // decl random_V1: integer°°
    {
      var random_V1: Int

      // sum_V0_CN1 = 0
      sum_V0_CN1 := 0

      // init random_V1
      inhale random_V1 == 0

      // random_V1 = 155
      random_V1 := 155

      // decl i_V2: int°°, L$6$2$Break
      {
        var i_V2: Int

        // init i_V2
        inhale i_V2 == 0

        // i_V2 = 0
        i_V2 := 0

        // while(i_V2 <= n_V0_CN0)
// invariant 0 <= i_V2 && i_V2 <= n_V0_CN0 + 1
// invariant sum_V0_CN1 == i_V2 * i_V2 - 1 / 2


        while (i_V2 <= n_V0_CN0)
          invariant 0 <= i_V2 && i_V2 <= n_V0_CN0 + 1
          invariant sum_V0_CN1 == i_V2 * (i_V2 - 1) / 2
        {

          // decl L$6$2$Continue
          {

            // decl

            // sum_V0_CN1 = sum_V0_CN1 + i_V2
            sum_V0_CN1 := sum_V0_CN1 + i_V2

            // L$6$2$Continue
            label L$6$2$Continue

            // i_V2 = i_V2 + 1
            i_V2 := i_V2 + 1
          }
          if (i_V2 <= n_V0_CN0) {
          }

        }

        // L$6$2$Break
        label L$6$2$Break
      }

      // sum_V0_CN1 = sum_V0_CN1
      sum_V0_CN1 := sum_V0_CN1

      // return
      goto returnLabel
    }
    label returnLabel

    // sum_V0 = sum_V0_CN1
    sum_V0 := sum_V0_CN1
  }
}