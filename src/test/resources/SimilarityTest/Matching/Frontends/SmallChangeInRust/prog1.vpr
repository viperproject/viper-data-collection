domain Snap$m_std$$option$$Option$_beg_$usize$_end_  {

  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int

  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(): Snap$m_std$$option$$Option$_beg_$usize$_end_

  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$usize$_end_

  function Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      1)
  }

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_()) ==
    0
  }

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      1)
  }

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      _0)
  }

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      18446744073709551615)
  }

  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$injectivity {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      self ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self)))
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {

  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"

  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"

  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"

  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"

  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"

  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"

  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"

  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"

  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"

  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"

  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"

  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"

  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"

  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"

  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"

  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"

  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"

  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"

  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {

  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"

  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"

  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"

  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"

  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"

  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"

  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"

  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"

  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"

  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"

  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"

  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"

  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"

  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"

  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"

  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"

  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"

  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"

  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"

  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {

  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"

  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"

  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"

  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"

  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"

  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"

  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"

  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"

  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"

  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"

  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"

  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"

  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"

  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {

  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"

  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"

  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"

  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"

  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"

  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"

  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"

  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"

  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"

  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"

  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"

  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"

  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"

  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {

  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"

  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"

  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"

  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"

  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"

  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"

  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"

  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"

  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"

  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"

  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"

  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"

  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"

  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {

  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"

  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"

  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"

  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"

  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"

  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"

  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"

  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"

  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"

  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"

  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"

  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"

  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"

  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {

  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"

  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"

  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"

  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"

  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"

  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"

  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"

  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"

  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"

  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"

  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"

  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"

  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"

  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$usize$_end_
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_())
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int)

predicate __TYPARAM__$_T$0$__(self: Ref)

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$usize$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_bisect() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var _preserve$0: Ref
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _8: Ref
  var _9: Int
  var _10: Int
  var _11: Ref
  var _12: Int
  var _13: Int
  var _14: Ref
  var _15: Int
  var _16: Int
  var _17: Ref
  var _18: Ref
  var _19: Ref
  var _20: Ref
  var _21: Ref
  var _22: Int
  var _23: Ref
  var _24: Int
  var _25: Int
  var _26: Int
  var _27: Ref
  var _28: Ref
  var _29: Int
  var _30: Int
  var _31: Ref
  var _33: Ref

  label start
  // ========== start ==========
  // Def path: "tutorial::bisect"
  // Span: tutorial.rs:8:1: 24:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(__TYPARAM__$_T$0$__(_1.val_ref), read$()) && acc(i32(_2), write))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] _3 = const 0_usize
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_int, write)
  _3.val_int := 0
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = &(*_1)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _1.val_ref
  inhale acc(__TYPARAM__$_T$0$__(_5.val_ref), read$())
  label l0
  // [mir] _4 = <T as Function>::domain_size(move _5) -> [return: bb1, unwind: bb17]
  label l1
  assert true
  exhale acc(_5.val_ref, write)
  _4 := builtin$havoc_ref()
  inhale acc(usize(_4), write)
  // transfer perm _5.val_ref --> old[l1](_5.val_ref) // unchecked: true
  inhale true
  label l2
  // ========== l3 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L3,L6,)

  if (__t0 && __t0) {
    // expire loan L6
    // transfer perm old[l1](_5.val_ref) --> old[l0](_5.val_ref) // unchecked: false
    exhale acc(__TYPARAM__$_T$0$__(old[l0](_5.val_ref)), read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_6)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb17]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_int()
  _9 := _3.val_int
  label l4
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  unfold acc(usize(_4), write)
  _10 := _4.val_int
  label l5
  // [mir] _8 = Lt(move _9, move _10)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _9 < _10
  // [mir] switchInt(move _8) -> [0: bb15, otherwise: bb4]
  __t17 := _8.val_bool
  if (__t17) {
    goto bb0
  }
  goto return

  label bb0
  // ========== l7 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(i32(_2), read)
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(usize(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))
  _10 := builtin$havoc_int()
  _11 := builtin$havoc_ref()
  _12 := builtin$havoc_int()
  _13 := builtin$havoc_int()
  _14 := builtin$havoc_ref()
  _15 := builtin$havoc_int()
  _16 := builtin$havoc_int()
  _17 := builtin$havoc_ref()
  _18 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _20 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_int()
  _23 := builtin$havoc_ref()
  _24 := builtin$havoc_int()
  _25 := builtin$havoc_int()
  _26 := builtin$havoc_int()
  _27 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _29 := builtin$havoc_int()
  _3 := builtin$havoc_ref()
  _30 := builtin$havoc_int()
  _31 := builtin$havoc_ref()
  _4 := builtin$havoc_ref()
  _8 := builtin$havoc_ref()
  _9 := builtin$havoc_int()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_3), write) &&
    (acc(usize(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb17]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _9 := _3.val_int
  label l8
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  unfold acc(usize(_4), write)
  _10 := _4.val_int
  label l9
  // [mir] _8 = Lt(move _9, move _10)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _9 < _10
  // [mir] switchInt(move _8) -> [0: bb15, otherwise: bb4]
  __t18 := _8.val_bool
  if (__t18) {
    goto bb1
  }
  goto l3

  label bb1
  // ========== l11 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  // ========== loop2_group3_bb4 ==========
  __t4 := true
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = _3
  _12 := builtin$havoc_int()
  _12 := _3.val_int
  label l12
  // [mir] StorageLive(_13)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] _15 = _4
  _15 := builtin$havoc_int()
  _15 := _4.val_int
  label l13
  // [mir] StorageLive(_16)
  // [mir] _16 = _3
  _16 := builtin$havoc_int()
  _16 := _3.val_int
  label l14
  // [mir] _17 = CheckedSub(_15, _16)
  _17 := builtin$havoc_ref()
  inhale acc(_17.tuple_0, write)
  inhale acc(_17.tuple_0.val_int, write)
  inhale acc(_17.tuple_1, write)
  inhale acc(_17.tuple_1.val_bool, write)
  _17.tuple_0.val_int := _15 - _16
  _17.tuple_1.val_bool := _15 - _16 < 0 || _15 - _16 > 18446744073709551615
  // [mir] assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, move _16) -> [success: bb5, unwind: bb17]
  __t19 := _17.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t19
  // ========== loop2_group3_bb5 ==========
  __t5 := true
  // [mir] _14 = move (_17.0: usize)
  _14 := _17.tuple_0
  label l15
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_15)
  // [mir] _18 = Eq(const 2_usize, const 0_usize)
  _18 := builtin$havoc_ref()
  inhale acc(_18.val_bool, write)
  _18.val_bool := false
  // [mir] assert(!move _18, "attempt to divide `{}` by zero", _14) -> [success: bb6, unwind: bb17]
  __t20 := _18.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t20
  // ========== loop2_group3_bb6 ==========
  __t6 := true
  // [mir] _13 = Div(move _14, const 2_usize)
  _13 := builtin$havoc_int()
  _13 := _14.val_int / 2
  // [mir] StorageDead(_14)
  // [mir] _19 = CheckedAdd(_12, _13)
  _19 := builtin$havoc_ref()
  inhale acc(_19.tuple_0, write)
  inhale acc(_19.tuple_0.val_int, write)
  inhale acc(_19.tuple_1, write)
  inhale acc(_19.tuple_1.val_bool, write)
  _19.tuple_0.val_int := _12 + _13
  _19.tuple_1.val_bool := _12 + _13 < 0 || _12 + _13 > 18446744073709551615
  // [mir] assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, move _13) -> [success: bb7, unwind: bb17]
  __t21 := _19.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t21
  // ========== loop2_group3_bb7 ==========
  __t7 := true
  // [mir] _11 = move (_19.0: usize)
  _11 := _19.tuple_0
  label l16
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] FakeRead(ForLet(None), _11)
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] _21 = &(*_1)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_ref, write)
  _21.val_ref := _1.val_ref
  inhale acc(__TYPARAM__$_T$0$__(_21.val_ref), read$())
  label l17
  // [mir] StorageLive(_22)
  // [mir] _22 = _11
  _22 := builtin$havoc_int()
  _22 := _11.val_int
  label l18
  // [mir] _20 = <T as Function>::eval(move _21, move _22) -> [return: bb8, unwind: bb17]
  label l19
  assert true
  assert _22 >= 0 && 18446744073709551615 >= _22
  exhale acc(_21.val_ref, write) &&
    (_22 >= 0 && 18446744073709551615 >= _22)
  _20 := builtin$havoc_ref()
  inhale acc(i32(_20), write)
  // transfer perm _21.val_ref --> old[l19](_21.val_ref) // unchecked: true
  inhale true
  label l20
  // ========== l21 ==========
  // MIR edge bb7 --> bb8
  // Expire borrows
  // expire_borrows ReborrowingDAG(L4,L5,)

  if (__t7 && __t7) {
    // expire loan L5
    // transfer perm old[l19](_21.val_ref) --> old[l17](_21.val_ref) // unchecked: false
    exhale acc(__TYPARAM__$_T$0$__(old[l17](_21.val_ref)), read$())
  }
  // ========== loop2_group3_bb8 ==========
  __t8 := true
  // [mir] StorageDead(_22)
  // [mir] StorageDead(_21)
  // [mir] FakeRead(ForLet(None), _20)
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = _20
  _24 := builtin$havoc_int()
  unfold acc(i32(_20), write)
  _24 := _20.val_int
  label l22
  // [mir] StorageLive(_25)
  // [mir] _25 = _2
  _25 := builtin$havoc_int()
  unfold acc(i32(_2), write)
  _25 := _2.val_int
  label l23
  // [mir] _23 = Lt(move _24, move _25)
  _23 := builtin$havoc_ref()
  inhale acc(_23.val_bool, write)
  _23.val_bool := _24 < _25
  // [mir] switchInt(move _23) -> [0: bb11, otherwise: bb9]
  __t22 := _23.val_bool
  if (__t22) {
    goto l6
  }
  goto loop2_start

  label l3
  // ========== l10 ==========
  // MIR edge bb3 --> bb15
  goto end_of_method

  label l6
  // ========== l25 ==========
  // MIR edge bb8 --> bb9
  // ========== loop2_group3_bb9 ==========
  __t9 := true
  // [mir] StorageDead(_25)
  // [mir] StorageDead(_24)
  // [mir] StorageLive(_26)
  // [mir] _26 = _11
  _26 := builtin$havoc_int()
  _26 := _11.val_int
  label l26
  // [mir] _27 = CheckedAdd(_26, const 1_usize)
  _27 := builtin$havoc_ref()
  inhale acc(_27.tuple_0, write)
  inhale acc(_27.tuple_0.val_int, write)
  inhale acc(_27.tuple_1, write)
  inhale acc(_27.tuple_1.val_bool, write)
  _27.tuple_0.val_int := _26 + 1
  _27.tuple_1.val_bool := _26 + 1 < 0 || _26 + 1 > 18446744073709551615
  // [mir] assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, const 1_usize) -> [success: bb10, unwind: bb17]
  __t23 := _27.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t23
  // ========== loop2_group3_bb10 ==========
  __t10 := true
  // [mir] _3 = move (_27.0: usize)
  _3 := _27.tuple_0
  label l27
  // [mir] StorageDead(_26)
  // [mir] _7 = const ()
  // [mir] goto -> bb14
  // ========== l40 ==========
  // drop Acc(_27.tuple_1.val_bool, write) (Acc(_27.tuple_1.val_bool, write))
  // drop Acc(_26.val_int, write) (Acc(_26.val_int, write))
  // drop Acc(_27.tuple_0, write) (Acc(_27.tuple_0, write))
  // drop Acc(_27.tuple_1, write) (Acc(_27.tuple_1, write))
  goto l7

  label l7
  // ========== loop2_group3_bb14 ==========
  __t13 := true
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_8)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb17]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_int()
  _9 := _3.val_int
  label l34
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  _10 := _4.val_int
  label l35
  // [mir] _8 = Lt(move _9, move _10)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _9 < _10
  // [mir] switchInt(move _8) -> [0: bb15, otherwise: bb4]
  __t25 := _8.val_bool
  if (__t25) {
    goto loop2_group2a_bb2
  }
  goto loop2_inv_pre

  label loop2_group1_bb2
  // ========== l30 ==========
  // MIR edge bb11 --> bb13
  // ========== bb13 ==========
  __t14 := true
  // [mir] StorageDead(_30)
  // [mir] StorageDead(_29)
  // [mir] StorageLive(_33)
  // [mir] _33 = _11
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_int, write)
  _33.val_int := _11.val_int
  label l38
  // [mir] _0 = std::option::Option::<usize>::Some(move _33)
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_0) ==
    1
  // downcast _0 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write)
  _0.enum_Some.f$0 := _33
  label l39
  // [mir] StorageDead(_33)
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] goto -> bb16
  // ========== l45 ==========
  fold acc(usize(_0.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // drop Acc(_20.val_int, write) (Acc(_20.val_int, write))
  // drop Acc(_23.val_bool, write) (Acc(_23.val_bool, write))
  // drop Acc(_19.tuple_0, write) (Acc(_19.tuple_0, write))
  // drop Acc(_17.tuple_1.val_bool, write) (Acc(_17.tuple_1.val_bool, write))
  // drop Acc(_18.val_bool, write) (Acc(_18.val_bool, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_12.val_int, write) (Acc(_12.val_int, write))
  // drop Acc(_16.val_int, write) (Acc(_16.val_int, write))
  // drop Acc(_29.val_int, write) (Acc(_29.val_int, write))
  // drop Acc(_15.val_int, write) (Acc(_15.val_int, write))
  // drop Acc(_17.tuple_0, write) (Acc(_17.tuple_0, write))
  // drop Acc(_24.val_int, write) (Acc(_24.val_int, write))
  // drop Acc(_14.val_int, write) (Acc(_14.val_int, write))
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  // drop Acc(_25.val_int, write) (Acc(_25.val_int, write))
  // drop Acc(_19.tuple_1.val_bool, write) (Acc(_19.tuple_1.val_bool, write))
  // drop Acc(_30.val_int, write) (Acc(_30.val_int, write))
  // drop Acc(_11.val_int, write) (Acc(_11.val_int, write))
  // drop Acc(_19.tuple_1, write) (Acc(_19.tuple_1, write))
  // drop Acc(_17.tuple_1, write) (Acc(_17.tuple_1, write))
  goto loop2_inv_post_fnspc

  label loop2_group1_bb3
  // ========== l31 ==========
  // MIR edge bb11 --> bb12
  // ========== loop2_group3_bb12 ==========
  __t12 := true
  // [mir] StorageDead(_30)
  // [mir] StorageDead(_29)
  // [mir] StorageLive(_31)
  // [mir] _31 = _11
  _31 := builtin$havoc_ref()
  inhale acc(_31.val_int, write)
  _31.val_int := _11.val_int
  label l32
  // [mir] _4 = move _31
  _4 := _31
  label l33
  // [mir] StorageDead(_31)
  // [mir] _7 = const ()
  // [mir] StorageDead(_28)
  // [mir] goto -> bb14
  // ========== l42 ==========
  // drop Acc(_29.val_int, write) (Acc(_29.val_int, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_30.val_int, write) (Acc(_30.val_int, write))
  goto l7

  label loop2_group2a_bb2
  // ========== l37 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  // obtain acc(_1.val_ref, read)
  fold acc(i32(_2), write)
  // obtain acc(i32(_2), read)
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(usize(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))
  inhale false
  goto end_of_method

  label loop2_inv_post_fnspc
  // ========== bb16 ==========
  __t16 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l41
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(__TYPARAM__$_T$0$__(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(__TYPARAM__$_T$0$__(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method

  label loop2_inv_post_perm
  // ========== bb15 ==========
  __t15 := true
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] StorageLive(_35)
  // [mir] _6 = const ()
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] _0 = std::option::Option::<usize>::None
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_0) ==
    0
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] goto -> bb16
  goto loop2_inv_post_fnspc

  label loop2_inv_pre
  // ========== l36 ==========
  // MIR edge bb3 --> bb15
  // ========== l44 ==========
  // drop Acc(_20.val_int, write) (Acc(_20.val_int, write))
  // drop Acc(_23.val_bool, write) (Acc(_23.val_bool, write))
  // drop Acc(_19.tuple_0, write) (Acc(_19.tuple_0, write))
  // drop Acc(_17.tuple_1.val_bool, write) (Acc(_17.tuple_1.val_bool, write))
  // drop Acc(_12.val_int, write) (Acc(_12.val_int, write))
  // drop Acc(_18.val_bool, write) (Acc(_18.val_bool, write))
  // drop Acc(_16.val_int, write) (Acc(_16.val_int, write))
  // drop Acc(_15.val_int, write) (Acc(_15.val_int, write))
  // drop Acc(_17.tuple_0, write) (Acc(_17.tuple_0, write))
  // drop Acc(_24.val_int, write) (Acc(_24.val_int, write))
  // drop Acc(_14.val_int, write) (Acc(_14.val_int, write))
  // drop Acc(_25.val_int, write) (Acc(_25.val_int, write))
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  // drop Acc(_19.tuple_1.val_bool, write) (Acc(_19.tuple_1.val_bool, write))
  // drop Acc(_11.val_int, write) (Acc(_11.val_int, write))
  // drop Acc(_19.tuple_1, write) (Acc(_19.tuple_1, write))
  // drop Acc(_17.tuple_1, write) (Acc(_17.tuple_1, write))
  goto loop2_inv_post_perm

  label loop2_start
  // ========== l24 ==========
  // MIR edge bb8 --> bb11
  // ========== loop2_group3_bb11 ==========
  __t11 := true
  // [mir] StorageDead(_25)
  // [mir] StorageDead(_24)
  // [mir] StorageLive(_28)
  // [mir] StorageLive(_29)
  // [mir] _29 = _20
  _29 := builtin$havoc_int()
  _29 := _20.val_int
  label l28
  // [mir] StorageLive(_30)
  // [mir] _30 = _2
  _30 := builtin$havoc_int()
  _30 := _2.val_int
  label l29
  // [mir] _28 = Gt(move _29, move _30)
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  _28.val_bool := _29 > _30
  // [mir] switchInt(move _28) -> [0: bb13, otherwise: bb12]
  __t24 := _28.val_bool
  if (__t24) {
    goto loop2_group1_bb3
  }
  goto loop2_group1_bb2

  label return
  // ========== l6 ==========
  // MIR edge bb3 --> bb15
  // ========== l43 ==========
  unfold acc(i32(_2), write)
  goto loop2_inv_post_perm
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
